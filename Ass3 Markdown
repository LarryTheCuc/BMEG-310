---
title: "Assignment 3"
author: "Group 16: Alexandra Murphy, Daniel Hinatsu, SJ Patel"
date: "`r Sys.Date()`"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Question 1

Areas of the genome with high GC content are harder to sequence because of their higher stability due to
base stacking or the formation of stronger hydrogen bonds. These regions also have a higher melting points
and form secondary structures, which further impedes the progression of DNA polymerase during PCR.

## Question 2

```{r}

[Daniel's image]

```

## Question 3

```{r Q3., results = 'hide'}

#q3.1

read.csv("single_cell_RNA_seq_bam.sam", nrows=73, sep="\t", header=FALSE, fill=TRUE)

# The SN tag indicates the reference sequence name and the LN tag indicates the 
# reference sequence length.
  
#q3.2

data <- read.csv("single_cell_RNA_seq_bam.sam", sep="\t", header=FALSE, fill=TRUE)
X.length <- data$V3[data$V2 == "SN:X"]

# The length of the X chromosome is 171031299 bp.

```

## Question 4

# 4.1
```{r}
sam <- read.csv("single_cell_RNA_seq_bam.sam",
                sep="\t", header=FALSE,
comment.char="@", col.names = paste0("V",seq_len(30)), fill=TRUE)
sam <- sam[paste0("V",seq_len(11))]
nrow(sam)

# There are 146346 reads.
```

# 4.2
```{r}
row_10 <- sam[10,]
# You should look at column 3 (V3) to find the chromosome to which the read was aligned.
# V11 corresponds to the data field QUAL which is the ASCII of Phred-scaled base QUALity+33.
```

# 4.3
```{r}
x_reads <- sam[sam$V3 == "X", ]
x_readcount <- nrow(x_reads)
cat(x_readcount, "reads align to chromosome X.")
```

# 4.4
```{r}
ascii_mean_phred <- function(qual_string){
  score <- utf8ToInt(qual_string) - 33

  return(mean(score, na.rm = TRUE))
}

 base_quality <- sapply(x_reads$V11, ascii_phred)
 mean_base_quality <- mean(base_quality, na.rm = TRUE)
 
 cat("The mean base quality is", mean_base_quality)
```

# 4.5
```{r}
library(ggplot2)

ascii_phred <- function(qual_string){
  score <- utf8ToInt(qual_string) - 33
  return(score)
}

scores <- lapply(sam$V11, ascii_phred)
score_mat <- do.call("cbind", scores)

boxplot(t(score_mat), main = "BQ Distribution")
```

# 4.6
```{r}
cat("Column 4 contains the leftmost mapping of the reads.")
```

# 4.7
```{r}
chromo_9 <- sam$V4[sam[,3] == '9']
total_reads <- length(chromo_9[chromo_9 > 40801273 & chromo_9 < 40805199])

cat(total_reads, "have their leftmost mapping position aligned within these coordinates.")
```

# 4.8
```{r}
reads_under_50 <- sum(sam$V5 < 50)

cat(reads_under_50, "reads have mapping qualities under 50")
```

# 4.9
```{r}
mapping_qual <- sam[which(sam[,5]< 50),]
mean_mapping_qual <- mean(mapping_qual$V5)

cat("The mean mapping quality of the reads which have mapping quality less than 50 is", mean_mapping_qual)
```

# 4.10
```{r}
tdtomato_reads <- sam[which(sam$V3 == 'tdTomato'), ]
total_tdtomato <- nrow(tdtomato_reads)

cat(total_tdtomato, "reads align to the tdTomato sequence.")

cat("As 63 reads have the fluorescence protein, we can expect the cell to emit fluorescence. Modifying a genome to include a fluorophore can be used to tell if an inserted DNA sequence is successfully being integrated, and is transcribed and translated into proteins.")
```

## Question 5

```{r, results = 'hide'}

#q5.1

vcf_con <- file("RNA_seq_annotated_variants.vcf", open="r")
vcf_file <- readLines(vcf_con)
close(vcf_con)
vcf <- data.frame(vcf_file)
header <- vcf[grepl("##", vcf$vcf_file), ]
factor(header)
variants <- read.csv("RNA_seq_annotated_variants.vcf", skip=length(header), header=TRUE, sep="\t")

# Reference allele: G, alternative allele: A.

#q5.2

ann_contents <- sub(".*ANN=", "", variants[1, "INFO"])

# ANN contents: A|intron_variant|MODIFIER|Sulf1|ENSMUSG00000016918|transcript|
# ENSMUST00000088585.9|protein_coding|2/21|c.-133+17418G>A||||||,A|intron_variant|
# MODIFIER|Sulf1|ENSMUSG00000016918|transcript|ENSMUST00000177608.7|protein_coding|2/21|
# c.-133+17418G>A||||||,A|intron_variant|MODIFIER|Sulf1|ENSMUSG00000016918|transcript|
# ENSMUST00000180062.7|protein_coding|1/20|c.-132-39973G>A||||||,A|intron_variant|MODIFIER|
# Sulf1|ENSMUSG00000016918|transcript|ENSMUST00000186051.6|protein_coding|2/21|
# c.-133+17418G>A||||||,A|intron_variant|MODIFIER|Sulf1|ENSMUSG00000016918|transcript|
# ENSMUST00000187376.6|retained_intron|2/11|n.420+17418G>A||||||,A|intron_variant|MODIFIER|
# Sulf1|ENSMUSG00000016918|transcript|ENSMUST00000186405.6|protein_coding|1/2|
# c.-133+17418G>A||||||WARNING_TRANSCRIPT_INCOMPLETE,A|intron_variant|MODIFIER|Sulf1|
# ENSMUSG00000016918|transcript|ENSMUST00000189541.6|protein_coding|2/3|
# c.-133+17418G>A||||||WARNING_TRANSCRIPT_INCOMPLETE"

#q5.3

ann_info <- (sub(".*##INFO=<ID=ANN", "", vcf[108, ]))

# The annotation field for this variant tells us that it is an intron variant.

#q5.4

var_683 <- (variants[683, ])

# Reference allele: ACAGGGG, alternative allele: A.

ann_var_contents <- sub(".*ANN=", "", variants[683, "INFO"])

# This variant would affect the gene Rps19.

#q5.5

high_impact <- variants[grepl("HIGH", variants$INFO), ]
num_high_impact <- nrow(high_impact)

# There are 4 high impact variants.

#q5.6

#frameshifts occur from a deletion or insertion that changes the reading frame 
#typically causing a premature stop. In comparison a missense is just a single 
#amino acid being changed. Frame shifts have a larger influence on the protein as 
#the entire amino acid chain is interpreted as opposed to a single amino-acid 
#in the chain being changed. 

#q.5.7

num_variants <- nrow(variants)
num_intronic <- 0

intronic_tags <- c("intron", "intergenic")

for (i in 1:nrow(variants)) {
  var_info <- as.character(variants$INFO[i])
  
  if (any(sapply(intronic_tags, grepl, var_info))) {
    num_intronic <- num_intronic + 1
  }
}

cat("Total number of variants: ", num_variants, "\n")
cat("Number of intronic variants: ", num_intronic)
cat("There are 686 intronic/intergenic variants, which is a majority of the total number of variants. This tells us that most of the variants in the dataset are intronic/intergenic.")

#q5.8

ImpactTargets <- c("HIGH", "MODERATE")
Impactfulvar <- variants[grep(paste(ImpactTargets,collapse = "|"), variants$INFO), ]
ProteinImpactVar <- Impactfulvar[grep("protein_coding", Impactfulvar$INFO), ]

#all impactful variants are protein coding

ProtImpInfo <- strsplit(as.character(ProteinImpactVar$INFO),";")
ProtImpVar <- ProtImpInfo[grep("ANN=", ProtImpInfo)]
ProtImpVar <- gsub("ANN=", "", ProtImpVar)

ImpactedGenes <- c()

for (i in 1:length(ProtImpVar)) {
 TEMPvarInfo <- unlist(ProtImpVar[i]) 
 LISTvarInfo <- unlist(strsplit(TEMPvarInfo, "\\|"))
 TEMPgenename <- LISTvarInfo[4]
 if(!(TEMPgenename %in% ImpactedGenes)){
   ImpactedGenes <- c(ImpactedGenes, TEMPgenename)
 }
}


ImpactedGenes

#as remarked earlier, all the high and moderate impact genes are all protein coding, suggesting that portein coding is needed for a large impact.

#q5.9

# Read lengths of only 60 bp could have consequences for the detection of longer insertions
# because the longer insertions will not be fully covered and may lead to fragmented
# information, alignment challenges, and ambiguity in variant calling.

#q5.10

sampleFormat <- strsplit(variants$FORMAT, ":",fixed=TRUE)
sampleGeno <- strsplit(variants$ws20171223_MPs_tomatoMuscle8wkQuiescent201, ":",fixed=TRUE) 

VAF <- c()
for (i in 1:length(sampleGeno)) {
  TEMPformat <- unlist(sampleFormat[i])
  TEMPvalues <- unlist(sampleGeno[i])
  AD <- unlist(strsplit(TEMPvalues[which(TEMPformat=="AD")],","))
  VAF[i] <- as.integer(AD[2]) / sum(as.integer(AD))
}

boxplot(VAF, main = "VAF")
sum(VAF > 0.05)
sum(VAF >0.05 & grepl("protein_coding", variants$INFO))

```

Contributions:

Collaborative:
All members initially completed the entire assignment individually before compiling answers to create one single document.
Finalized document included the following individual parts:
Alex:
1, 3, 4.7, 5.1, 5.2, 5.3, 5.4, 5.5, 5.9
Daniel: 
2, 4.1, 4.2, 4.3, 4.6, 4.8, 4.9, 5.6, 5.8, 5.10
SJ:
4.4, 4.5, 4.10, 5.7, 5.8

