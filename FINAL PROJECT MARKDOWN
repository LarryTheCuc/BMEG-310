---
title: "Project Mutation Analysis"
author: "Alexandra Murphy, Daniel Hinatsu, SJ Patel"
date: "2023-11-28"
output: pdf_document
---

# Description: This code is intended to use the cancer genome atlasâ€™ thorough data on HCC (liver cancer) and conduct  bioinformatic analysis to better understand and identify trends in the data using machine learning. Targets for anylsis include : genetic mutation trends, survival trends, differential expression of notable genes, and biochemical pathways affected by HCC.

# Pre-processing

```{r}

# Load data
clinical <-  read.csv("C:/Users/Daniel/Desktop/School/Year 3/BMEG 310/Final Project/TCGA-LIHC/data_clinical_patient.txt", sep = "\t")
mutation <-  read.csv("C:/Users/Daniel/Desktop/School/Year 3/BMEG 310/Final Project/TCGA-LIHC/data_mutations.txt", sep = "\t")
RNAseq <-  read.csv("C:/Users/Daniel/Desktop/School/Year 3/BMEG 310/Final Project/TCGA-LIHC/RNAseq_LIHC.csv", row.names = 1)

library(ggplot2)
library(pheatmap)
library("TCGAbiolinks")
library("survival")
library("survminer")
library("SummarizedExperiment")
library(DESeq2)
library("gridExtra")

```

```{r}

# Get common patients
unique_clinical <- unique(clinical$X.Patient.Identifier)

alter_mutation <- substr(mutation$Tumor_Sample_Barcode, 1, 12)
unique_mutation <- unique(alter_mutation)

alter_RNAseq <- gsub("\\.", "-", colnames(RNAseq))
alter_RNAseq <- substr(alter_RNAseq, 1, 12)
unique_RNAseq <- unique(alter_RNAseq)

clinical_mutation_patients <- intersect(unique_clinical, unique_mutation)
total_unique_patients <- intersect(clinical_mutation_patients, unique_RNAseq)

clinical <- clinical[clinical$X.Patient.Identifier %in% total_unique_patients, ]

mutation <- mutation[grepl(paste(total_unique_patients, collapse="|"), mutation$Tumor_Sample_Barcode, ignore.case = TRUE), ]

alter_total <- gsub("\\-", ".", total_unique_patients)
RNAseq <- RNAseq[grepl(paste(alter_total, collapse="|"), colnames(RNAseq), ignore.case = TRUE), ]

```

# Mutation Analysis

```{r}

# Plot MAF summary
hugo <- as.data.frame(table(mutation$Hugo_Symbol))
var.class <- as.data.frame(table(mutation$Variant_Classification))
ggplot(data=var.class, aes(x=Var1, y=Freq))+
  geom_col()+
  theme(axis.text.x = element_text(angle = 45,hjust=1))

var.class2 <- as.data.frame(table(mutation$VARIANT_CLASS))
ggplot(data=var.class2, aes(x=Var1, y=Freq))+
  geom_col(aes(fill=Var1))

var.type <- as.data.frame(table(mutation$Variant_Type))
ggplot(data=var.type, aes(x=Var1, y=Freq))+
  geom_col( aes(fill=Var1))

sample.name <- as.data.frame(table(mutation$Tumor_Sample_Barcode))
hugo <- as.data.frame(table(mutation$Hugo_Symbol))

hugo.ordered <- hugo[order(-hugo$Freq),]
ggplot(data=hugo.ordered[1:15,], aes(x=Var1, y=Freq))+
  geom_col()+
  theme(axis.text.x = element_text(angle = 45,hjust=1))+
  scale_x_discrete(limits = hugo.ordered[1:15,]$Var1)

```

```{r}

# Generate oncoplot matrix
cnv_events = unique(mutation$Variant_Classification)
cnv_events <- cnv_events[!cnv_events == "Silent"]
oncomat = reshape2::dcast(
  data = mutation,
  formula = Hugo_Symbol ~ Tumor_Sample_Barcode,
  fun.aggregate = function(x, cnv = cnv_events) {
    x = as.character(x) #
    xad = x[x %in% cnv]
    xvc = x[!x %in% cnv]
   
    if (length(xvc) > 0) {
      xvc = ifelse(test = length(xvc) > 1,
                   yes = 'Multi_Hit',
                   no = xvc)
    }
   
    x = ifelse(
      test = length(xad) > 0,
      yes = paste(xad, xvc, sep = ';'),
      no = xvc
    )
    x = gsub(pattern = ';$',
             replacement = '',
             x = x)
    x = gsub(pattern = '^;',
             replacement = '',
             x = x)
    return(x)
  },
  value.var = 'Variant_Classification',
  fill = '',
  drop = FALSE
)

rownames(oncomat) = oncomat$Hugo_Symbol
oncomat <- oncomat[,-1]

oncomat.ordered <- oncomat[order(-hugo$Freq),]

```

```{r}

# Transform matrix into binary matrix
mat <- oncomat.ordered
mat[mat!=""]=1
mat[mat==""]=0
mat <- apply(mat, 2 ,as.numeric)
mat <- as.matrix(mat)
rownames(mat)  <-  row.names(oncomat.ordered)

```

```{r}

# Heatmap and clustering
reduce.mat <- mat[1:4,]
res <- pheatmap(reduce.mat,
         cluster_rows = F,
         show_colnames=FALSE)

cluster <-  as.data.frame(cutree(res$tree_col, k = 2))

# Append clusters
clinical <- cbind(clinical, cluster)
colnames(clinical)[colnames(clinical) == "cutree(res$tree_col, k = 2)"] <- "clusters"

```

# Survival Analysis

```{r}

# Create data frame
clin_df = clinical[clinical$Person.Neoplasm.Cancer.Status == "With Tumor",
                    c("X.Patient.Identifier",
                      "Ethnicity.Category",
                      "Race.Category",
                      "Diagnosis.Age",
                      "Overall.Survival.Status",
                      "Overall.Survival..Months.",
                      "Last.Communication.Contact.from.Initial.Pathologic.Diagnosis.Date",
                      "Sex",
                      "clusters",
                      "Neoplasm.Disease.Stage.American.Joint.Committee.on.Cancer.Code",
                      "Patient.Weight")]

# Create a new boolean variable that has TRUE for dead patients and FALSE for live patients
clin_df$deceased = clin_df$Overall.Survival.Status == "1:DECEASED"

# Create an "overall survival" variable
clin_df$overall_survival = ifelse(clin_df$deceased,
                                   clin_df$Overall.Survival..Months.,
                                   clin_df$Overall.Survival..Months.)

clin_df$overall_survival <- as.integer(clin_df$overall_survival)
clin_df <- clin_df[!is.na(clin_df$overall_survival), , drop = FALSE]

```

```{r}

# Kaplan-Meier plots

# Plot for gender
fit = survfit(Surv(overall_survival, deceased) ~ Sex, data=clin_df)

ggsurvplot(fit, data=clin_df, pval=T, risk.table=T, risk.table.col="strata", risk.table.height=0.35)

# Plot for ethnicity
fit = survfit(Surv(overall_survival, deceased) ~ Ethnicity.Category, data=clin_df)

ggsurvplot(fit, data=clin_df, pval=T, risk.table=T, risk.table.col="strata", risk.table.height=0.35)

# Plot for race
fit = survfit(Surv(overall_survival, deceased) ~ Race.Category, data=clin_df)

ggsurvplot(fit, data=clin_df, pval=T, risk.table=T, risk.table.col="strata", risk.table.height=0.35)

# Plot for stage
# Remove any of the letters "a", "b" or "c"
clin_df$Neoplasm.Disease.Stage.American.Joint.Committee.on.Cancer.Code = gsub("[ABC]$", "", clin_df$Neoplasm.Disease.Stage.American.Joint.Committee.on.Cancer.Code)

# We also remove those with tumor stage 4, since they are too few
clin_df[which(clin_df$Neoplasm.Disease.Stage.American.Joint.Committee.on.Cancer.Code == "STAGE IV"), "Neoplasm.Disease.Stage.American.Joint.Committee.on.Cancer.Code"] = NA

fit = survfit(Surv(overall_survival, deceased) ~ Neoplasm.Disease.Stage.American.Joint.Committee.on.Cancer.Code, data=clin_df)

ggsurvplot(fit, data=clin_df, pval=T, risk.table=T, risk.table.height=0.35)

# Plot for clusters
fit = survfit(Surv(overall_survival, deceased) ~ clusters, data=clin_df)

ggsurvplot(fit, data=clin_df, pval=T, risk.table=T, risk.table.col="strata", risk.table.height=0.35)

```

# Differential Expression Analysis

```{r}

#Pre-processing
colnames(RNAseq) <- gsub("\\.", "-", colnames(RNAseq))
colnames(RNAseq) <- substr(colnames(RNAseq), 1, 12)
total <- clin_df$X.Patient.Identifier
RNAseq <- unique(RNAseq[, !grepl("\\.1$", colnames(RNAseq))])
RNAseq <- unique(RNAseq[, colnames(RNAseq) %in% total, drop = FALSE])

```

```{r}

# Sample distances
sampleDists = dist(t(RNAseq),upper = TRUE)

annot_col = data.frame(clin_df$clusters)
row.names(annot_col) <- clin_df$X.Patient.Identifier

sampleDistMatrix = as.matrix( sampleDists )
rownames(sampleDistMatrix) = colnames(RNAseq)
colnames(sampleDistMatrix) = colnames(RNAseq)

pheatmap(sampleDistMatrix,
         clustering_distance_rows = sampleDists,
         clustering_distance_cols = sampleDists,
         cluster_rows=FALSE, show_rownames=TRUE,
         cluster_cols=TRUE,
         annotation_col=annot_col)

```
```{r}
# Factor clusters
clin_df$clusters <- factor(clin_df$clusters)

# DESeq2
dds <- DESeqDataSetFromMatrix(countData = RNAseq,
                              colData = clin_df,
                              design = ~ clusters)

dds = DESeq(dds)

# Building results table
res <- results(dds)
res <- res[order(res$pvalue),]

resSig <- subset(res, padj < 0.05)
head(resSig[ order( resSig$log2FoldChange ), ])
head(resSig[ order( resSig$log2FoldChange, decreasing=TRUE), ])

plotMA(resSig, ylim=c(-2,2))

plotCounts(dds, gene=which.min(res$padj), intgroup="clusters")

# Variance stabilizing transformation
vsd <- vst(dds)


#commment out one of these genes


# Subset of 20 genes with the largest positive log2fold change.
genes <- order(res$log2FoldChange,decreasing = TRUE)[1:10]

# Subset of 10 genes with largest negative log2fold change
#genes <- order(res$log2FoldChange, decreasing = FALSE)[1:10]

annot_col = data.frame(clin_df$clusters)
row.names(annot_col) <- clin_df$X.Patient.Identifier

sampleMatrix <- assay(vsd)[genes,]

rownames(sampleMatrix) = rownames(RNAseq[genes,])
colnames(sampleMatrix) = colnames(RNAseq)

pheatmap(sampleMatrix , cluster_rows=FALSE, show_rownames=TRUE,
         cluster_cols=TRUE, annotation_col=annot_col)

```
